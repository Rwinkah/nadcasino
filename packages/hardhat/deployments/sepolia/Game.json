{
  "address": "0x95b24e90011571a952e09e8FF9398229B4C10D33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collisionCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "Collision",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collisionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "playGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reportCollision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        }
      ],
      "name": "updateTrustedSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0b9d61ed68485bb63889f6d137870a61ebcc7e274fbfa7a597f087fd50158e73",
  "receipt": {
    "to": null,
    "from": "0x1c07B848B69d0b435A80e84BAd6358251131d62d",
    "contractAddress": "0x95b24e90011571a952e09e8FF9398229B4C10D33",
    "transactionIndex": 1,
    "gasUsed": "528930",
    "logsBloom": "0x
    "blockHash": "0xe3f2a7f09d67ed9c9018e7ae222beac76879ad311dce916e678841dff9b4e5b5",
    "transactionHash": "0x0b9d61ed68485bb63889f6d137870a61ebcc7e274fbfa7a597f087fd50158e73",
    "logs": [],
    "blockNumber": 7691755,
    "cumulativeGasUsed": "627450",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1c07B848B69d0b435A80e84BAd6358251131d62d"
  ],
  "numDeployments": 3,
  "solcInputHash": "8eab72fed15433fb094cf955bb88e3ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collisionCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Collision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collisionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportCollision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateTrustedSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Games.sol\":\"Game\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Games.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Game {\\n    address public trustedSigner; // Backend's trusted signer\\n    mapping(address => uint256) public latestNonce; // Tracks the latest nonce per user\\n    uint256 public collisionCount;\\n\\n    event Collision(uint256 collisionCount, address player);\\n\\n    event Payout(address indexed player, uint256 amount);\\n\\n    constructor(address _trustedSigner) {\\n        trustedSigner = _trustedSigner;\\n    }\\n\\n    // function playGame(bytes memory signature) external {\\n    //     require(nonce > latestNonce[player], \\\"Invalid or reused nonce\\\");\\n\\n    //     // Verify the signature\\n    //     bytes32 messageHash = keccak256(abi.encodePacked(player, amount, nonce));\\n    //     require(_verifySignature(messageHash, signature), \\\"Invalid signature\\\");\\n\\n    //     latestNonce[player] = nonce; // Update nonce after successful verification\\n\\n    //     require(address(this).balance >= amount, \\\"Insufficient contract balance\\\");\\n    //     (bool success, ) = player.call{ value: amount }(\\\"\\\");\\n    //     require(success, \\\"Transfer failed\\\");\\n\\n    //     emit Payout(player, amount);\\n    // }\\n    function _extractSignedData(\\n        bytes memory signature\\n    ) internal pure returns (address player, uint256 amount, uint256 nonce) {\\n        require(signature.length >= 97, \\\"Invalid signature data\\\"); // 65 for signature + 32 for data\\n        assembly {\\n            player := mload(add(signature, 20))\\n            amount := mload(add(signature, 52))\\n            nonce := mload(add(signature, 84))\\n        }\\n    }\\n\\n    function playGame(bytes memory signature) external {\\n        (address player, uint256 amount, uint256 nonce) = _extractSignedData(signature);\\n\\n        require(nonce > latestNonce[player], \\\"Invalid or reused nonce\\\");\\n\\n        // Verify the signature\\n        bytes32 messageHash = keccak256(abi.encodePacked(player, amount, nonce));\\n        require(_verifySignature(messageHash, signature), \\\"Invalid signature\\\");\\n\\n        latestNonce[player] = nonce; // Update nonce after successful verification\\n\\n        require(address(this).balance >= amount, \\\"Insufficient contract balance\\\");\\n        (bool success, ) = player.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Payout(player, amount);\\n    }\\n\\n    function _verifySignature(bytes32 messageHash, bytes memory signature) internal view returns (bool) {\\n        bytes32 ethSignedMessageHash = _getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, signature) == trustedSigner;\\n    }\\n\\n    function _getEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n        return ecrecover(ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"Invalid signature length\\\");\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n\\n    // Admin function to update the trusted signer\\n    function updateTrustedSigner(address newSigner) external {\\n        require(msg.sender == trustedSigner, \\\"Only current signer can update\\\");\\n        trustedSigner = newSigner;\\n    }\\n\\n    function reportCollision() public {\\n        // require(msg.sender == trustedSigner, \\\"Who are you?\\\");\\n        collisionCount++;\\n        emit Collision(collisionCount, msg.sender);\\n    }\\n\\n    // Fallback function to receive Ether\\n    receive() external payable {}\\n\\n    function placeBet() external payable {\\n        require(msg.value > 0, \\\"Bet amount must be greater than zero\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb600e623962531f8d3eb24c3516f752d59f5e3d71824dc0b8c73e326cd6618f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516108be3803806108be83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61082b806100936000396000f3fe6080604052600436106100745760003560e01c80637530625f1161004e5780637530625f146100ed578063c27b20ca1461010d578063f74d54801461012d578063f90f45601461016557600080fd5b806330df34f71461008057806331757f2e1461009757806347ed64e1146100c057600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b5061009561016d565b005b3480156100a357600080fd5b506100ad60025481565b6040519081526020015b60405180910390f35b3480156100cc57600080fd5b506100ad6100db3660046106d7565b60016020526000908152604090205481565b3480156100f957600080fd5b506100956101083660046106d7565b6101bf565b34801561011957600080fd5b5061009561012836600461071d565b610240565b34801561013957600080fd5b5060005461014d906001600160a01b031681565b6040516001600160a01b0390911681526020016100b7565b61009561049a565b6002805490600061017d836107ce565b9091555050600254604080519182523360208301527f9ce2356a920c597a2bcba687ca4ac5087eb106c5502fce869a0b0a053149aa10910160405180910390a1565b6000546001600160a01b0316331461021e5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792063757272656e74207369676e65722063616e20757064617465000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600061024e846104f8565b6001600160a01b038316600090815260016020526040902054929550909350915081116102bd5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206f7220726575736564206e6f6e63650000000000000000006044820152606401610215565b6040516bffffffffffffffffffffffff19606085901b166020820152603481018390526054810182905260009060740160405160208183030381529060405280519060200120905061030f818661055f565b61034f5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610215565b6001600160a01b0384166000908152600160205260409020829055478311156103ba5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610215565b6000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114610407576040519150601f19603f3d011682016040523d82523d6000602084013e61040c565b606091505b505090508061044f5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610215565b846001600160a01b03167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68560405161048a91815260200190565b60405180910390a2505050505050565b600034116104f65760405162461bcd60e51b8152602060048201526024808201527f42657420616d6f756e74206d7573742062652067726561746572207468616e206044820152637a65726f60e01b6064820152608401610215565b565b60008060006061845110156105485760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964207369676e6174757265206461746160501b6044820152606401610215565b505050601481015160348201516054909201519092565b6000806105b9846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000549091506001600160a01b03166105d282856105e4565b6001600160a01b031614949350505050565b6000806000806105f385610663565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa15801561064e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600083516041146106b95760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610215565b50505060208101516040820151606090920151909260009190911a90565b6000602082840312156106e957600080fd5b81356001600160a01b038116811461070057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561072f57600080fd5b813567ffffffffffffffff8082111561074757600080fd5b818401915084601f83011261075b57600080fd5b81358181111561076d5761076d610707565b604051601f8201601f19908116603f0116810190838211818310171561079557610795610707565b816040528281528760208487010111156107ae57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000600182016107ee57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b2d1ff618144ffd6c267649038409cbb16d54f473b263d9b351d37b6beb24ee664736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80637530625f1161004e5780637530625f146100ed578063c27b20ca1461010d578063f74d54801461012d578063f90f45601461016557600080fd5b806330df34f71461008057806331757f2e1461009757806347ed64e1146100c057600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b5061009561016d565b005b3480156100a357600080fd5b506100ad60025481565b6040519081526020015b60405180910390f35b3480156100cc57600080fd5b506100ad6100db3660046106d7565b60016020526000908152604090205481565b3480156100f957600080fd5b506100956101083660046106d7565b6101bf565b34801561011957600080fd5b5061009561012836600461071d565b610240565b34801561013957600080fd5b5060005461014d906001600160a01b031681565b6040516001600160a01b0390911681526020016100b7565b61009561049a565b6002805490600061017d836107ce565b9091555050600254604080519182523360208301527f9ce2356a920c597a2bcba687ca4ac5087eb106c5502fce869a0b0a053149aa10910160405180910390a1565b6000546001600160a01b0316331461021e5760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792063757272656e74207369676e65722063616e20757064617465000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600080600061024e846104f8565b6001600160a01b038316600090815260016020526040902054929550909350915081116102bd5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206f7220726575736564206e6f6e63650000000000000000006044820152606401610215565b6040516bffffffffffffffffffffffff19606085901b166020820152603481018390526054810182905260009060740160405160208183030381529060405280519060200120905061030f818661055f565b61034f5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610215565b6001600160a01b0384166000908152600160205260409020829055478311156103ba5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610215565b6000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114610407576040519150601f19603f3d011682016040523d82523d6000602084013e61040c565b606091505b505090508061044f5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610215565b846001600160a01b03167f5afeca38b2064c23a692c4cf353015d80ab3ecc417b4f893f372690c11fbd9a68560405161048a91815260200190565b60405180910390a2505050505050565b600034116104f65760405162461bcd60e51b8152602060048201526024808201527f42657420616d6f756e74206d7573742062652067726561746572207468616e206044820152637a65726f60e01b6064820152608401610215565b565b60008060006061845110156105485760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964207369676e6174757265206461746160501b6044820152606401610215565b505050601481015160348201516054909201519092565b6000806105b9846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000549091506001600160a01b03166105d282856105e4565b6001600160a01b031614949350505050565b6000806000806105f385610663565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa15801561064e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b600080600083516041146106b95760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606401610215565b50505060208101516040820151606090920151909260009190911a90565b6000602082840312156106e957600080fd5b81356001600160a01b038116811461070057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561072f57600080fd5b813567ffffffffffffffff8082111561074757600080fd5b818401915084601f83011261075b57600080fd5b81358181111561076d5761076d610707565b604051601f8201601f19908116603f0116810190838211818310171561079557610795610707565b816040528281528760208487010111156107ae57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000600182016107ee57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220b2d1ff618144ffd6c267649038409cbb16d54f473b263d9b351d37b6beb24ee664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/Games.sol:Game",
        "label": "trustedSigner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7,
        "contract": "contracts/Games.sol:Game",
        "label": "latestNonce",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9,
        "contract": "contracts/Games.sol:Game",
        "label": "collisionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}