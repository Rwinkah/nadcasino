{
  "address": "0x8E22F0fa3b7C569fa52531962f2c434FA66850a8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "BetPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpCount",
          "type": "uint256"
        }
      ],
      "name": "molandakJump",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "molandakNewHighScore",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collisionCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "plinkoCollision",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "PlinkoCollision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "highScores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "molandakJumpCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "molandakReportJump",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "molandakrunSetHighscore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plinkoCollisionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "plinkoReportCollision",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSigner",
          "type": "address"
        }
      ],
      "name": "updateTrustedSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf633bd8f7dfaebcc0a15ebe98542b08c39e2e3201a558ef70239c2b91890f7db",
  "receipt": {
    "to": null,
    "from": "0x1c07B848B69d0b435A80e84BAd6358251131d62d",
    "contractAddress": "0x8E22F0fa3b7C569fa52531962f2c434FA66850a8",
    "transactionIndex": 55,
    "gasUsed": "414255",
    "logsBloom": "0x
    "blockHash": "0xa872a2d6523cad5417343911c490918c2f1f01f534c293f294a1377deac10383",
    "transactionHash": "0xf633bd8f7dfaebcc0a15ebe98542b08c39e2e3201a558ef70239c2b91890f7db",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 5765673,
        "transactionHash": "0xf633bd8f7dfaebcc0a15ebe98542b08c39e2e3201a558ef70239c2b91890f7db",
        "address": "0x8E22F0fa3b7C569fa52531962f2c434FA66850a8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c07b848b69d0b435a80e84bad6358251131d62d"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0xa872a2d6523cad5417343911c490918c2f1f01f534c293f294a1377deac10383"
      },
      {
        "transactionIndex": 55,
        "blockNumber": 5765673,
        "transactionHash": "0xf633bd8f7dfaebcc0a15ebe98542b08c39e2e3201a558ef70239c2b91890f7db",
        "address": "0x8E22F0fa3b7C569fa52531962f2c434FA66850a8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001c07b848b69d0b435a80e84bad6358251131d62d",
          "0x0000000000000000000000001c07b848b69d0b435a80e84bad6358251131d62d"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0xa872a2d6523cad5417343911c490918c2f1f01f534c293f294a1377deac10383"
      }
    ],
    "blockNumber": 5765673,
    "cumulativeGasUsed": "11332362",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1c07B848B69d0b435A80e84BAd6358251131d62d"
  ],
  "numDeployments": 3,
  "solcInputHash": "5963a8002dbc8510cd285c4c7d8bb709",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"BetPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpCount\",\"type\":\"uint256\"}],\"name\":\"molandakJump\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"molandakNewHighScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collisionCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"plinkoCollision\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PlinkoCollision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"highScores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"molandakJumpCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"molandakReportJump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"molandakrunSetHighscore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plinkoCollisionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"plinkoReportCollision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateTrustedSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nadcasino.sol\":\"Nadcasino\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Nadcasino.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Nadcasino is Ownable {\\n    address public trustedSigner; // Backend's trusted signer\\n    uint256 public plinkoCollisionCount;\\n    mapping(address => uint256) public PlinkoCollision;\\n    mapping(address => uint256) public highScores;\\n    uint256 public molandakJumpCount;\\n\\n    event molandakJump(address player, uint256 jumpCount);\\n    event molandakNewHighScore(address player, uint256 score);\\n    event plinkoCollision(uint256 collisionCount, address player);\\n    event Payout(address indexed player, uint256 amount);\\n    event BetPlaced(address indexed player, uint256 amount, uint256 timestamp, uint256 nonce);\\n\\n    constructor(address _trustedSigner) Ownable(msg.sender) {\\n        trustedSigner = _trustedSigner;\\n        transferOwnership(msg.sender);\\n    }\\n\\n    function _verifySignature(bytes32 messageHash, bytes memory signature) internal view returns (bool) {\\n        address signer = trustedSigner;\\n        bytes32 ethSignedMessageHash = _getEthSignedMessageHash(messageHash);\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\n    }\\n\\n    function _getEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 ethSignedMessageHash, bytes memory signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n        return ecrecover(ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"Invalid signature length\\\");\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n\\n    function updateTrustedSigner(address newSigner) external onlyOwner {\\n        trustedSigner = newSigner;\\n    }\\n\\n    function plinkoReportCollision(address player) public {\\n        plinkoCollisionCount++;\\n        PlinkoCollision[player]++;\\n        emit plinkoCollision(plinkoCollisionCount, player);\\n    }\\n\\n    function molandakrunSetHighscore(uint256 score, address player) external onlyOwner {\\n        uint256 currentScore = highScores[player];\\n        if (score > currentScore) {\\n            highScores[player] = score;\\n            emit molandakNewHighScore(player, score);\\n        }\\n    }\\n\\n    function molandakReportJump(address player) public {\\n        molandakJumpCount++;\\n        emit molandakJump(player, molandakJumpCount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x557e8b931a553b0ac6237b12554525558aad394543aca0165094bfd5de7a2c72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161070438038061070483398101604081905261002f91610147565b338061005657604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61005f8161008a565b50600180546001600160a01b0319166001600160a01b038316179055610084336100da565b50610177565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6100e2610118565b6001600160a01b03811661010c57604051631e4fbdf760e01b81526000600482015260240161004d565b6101158161008a565b50565b6000546001600160a01b031633146101455760405163118cdaa760e01b815233600482015260240161004d565b565b60006020828403121561015957600080fd5b81516001600160a01b038116811461017057600080fd5b9392505050565b61057e806101866000396000f3fe6080604052600436106100aa5760003560e01c806390f5bf451161006457806390f5bf4514610195578063995bc5ed146101c25780639c4c3633146101e2578063f01e04f614610202578063f2fde38b14610218578063f74d54801461023857600080fd5b8062d8e104146100b65780634f43beda146100f657806364021d3114610118578063715018a61461012e5780637530625f146101435780638da5cb5b1461016357600080fd5b366100b157005b600080fd5b3480156100c257600080fd5b506100e36100d13660046104d3565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561010257600080fd5b506101166101113660046104d3565b610258565b005b34801561012457600080fd5b506100e360055481565b34801561013a57600080fd5b506101166102de565b34801561014f57600080fd5b5061011661015e3660046104d3565b6102f2565b34801561016f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100ed565b3480156101a157600080fd5b506100e36101b03660046104d3565b60036020526000908152604090205481565b3480156101ce57600080fd5b506101166101dd3660046104f5565b61031c565b3480156101ee57600080fd5b506101166101fd3660046104d3565b61039f565b34801561020e57600080fd5b506100e360025481565b34801561022457600080fd5b506101166102333660046104d3565b6103f7565b34801561024457600080fd5b5060015461017d906001600160a01b031681565b6002805490600061026883610521565b90915550506001600160a01b038116600090815260036020526040812080549161029183610521565b9091555050600254604080519182526001600160a01b03831660208301527f860abb91afc296efc54882b6890c3072af00e25a045dee383fe6631a08bd066391015b60405180910390a150565b6102e661043a565b6102f06000610467565b565b6102fa61043a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61032461043a565b6001600160a01b0381166000908152600460205260409020548083111561039a576001600160a01b038216600081815260046020908152604091829020869055815192835282018590527f09c9076e5db7ce8e29f39ecf3665bddabc1962b8eb6edf420317539744c401d9910160405180910390a15b505050565b600580549060006103af83610521565b9091555050600554604080516001600160a01b038416815260208101929092527f8ff751d0b4ba10ed997822f36396385bd1903b8ae5efd0fa722a2d3e057931bf91016102d3565b6103ff61043a565b6001600160a01b03811661042e57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61043781610467565b50565b6000546001600160a01b031633146102f05760405163118cdaa760e01b8152336004820152602401610425565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146104ce57600080fd5b919050565b6000602082840312156104e557600080fd5b6104ee826104b7565b9392505050565b6000806040838503121561050857600080fd5b82359150610518602084016104b7565b90509250929050565b60006001820161054157634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212208a630d7b7e1dc8eb8752d958845ba2716ca983ebc7ee6104f5979baf990718f064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100aa5760003560e01c806390f5bf451161006457806390f5bf4514610195578063995bc5ed146101c25780639c4c3633146101e2578063f01e04f614610202578063f2fde38b14610218578063f74d54801461023857600080fd5b8062d8e104146100b65780634f43beda146100f657806364021d3114610118578063715018a61461012e5780637530625f146101435780638da5cb5b1461016357600080fd5b366100b157005b600080fd5b3480156100c257600080fd5b506100e36100d13660046104d3565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561010257600080fd5b506101166101113660046104d3565b610258565b005b34801561012457600080fd5b506100e360055481565b34801561013a57600080fd5b506101166102de565b34801561014f57600080fd5b5061011661015e3660046104d3565b6102f2565b34801561016f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100ed565b3480156101a157600080fd5b506100e36101b03660046104d3565b60036020526000908152604090205481565b3480156101ce57600080fd5b506101166101dd3660046104f5565b61031c565b3480156101ee57600080fd5b506101166101fd3660046104d3565b61039f565b34801561020e57600080fd5b506100e360025481565b34801561022457600080fd5b506101166102333660046104d3565b6103f7565b34801561024457600080fd5b5060015461017d906001600160a01b031681565b6002805490600061026883610521565b90915550506001600160a01b038116600090815260036020526040812080549161029183610521565b9091555050600254604080519182526001600160a01b03831660208301527f860abb91afc296efc54882b6890c3072af00e25a045dee383fe6631a08bd066391015b60405180910390a150565b6102e661043a565b6102f06000610467565b565b6102fa61043a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61032461043a565b6001600160a01b0381166000908152600460205260409020548083111561039a576001600160a01b038216600081815260046020908152604091829020869055815192835282018590527f09c9076e5db7ce8e29f39ecf3665bddabc1962b8eb6edf420317539744c401d9910160405180910390a15b505050565b600580549060006103af83610521565b9091555050600554604080516001600160a01b038416815260208101929092527f8ff751d0b4ba10ed997822f36396385bd1903b8ae5efd0fa722a2d3e057931bf91016102d3565b6103ff61043a565b6001600160a01b03811661042e57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61043781610467565b50565b6000546001600160a01b031633146102f05760405163118cdaa760e01b8152336004820152602401610425565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146104ce57600080fd5b919050565b6000602082840312156104e557600080fd5b6104ee826104b7565b9392505050565b6000806040838503121561050857600080fd5b82359150610518602084016104b7565b90509250929050565b60006001820161054157634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212208a630d7b7e1dc8eb8752d958845ba2716ca983ebc7ee6104f5979baf990718f064736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 184,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "trustedSigner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 186,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "plinkoCollisionCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 190,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "PlinkoCollision",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 194,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "highScores",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 196,
        "contract": "contracts/Nadcasino.sol:Nadcasino",
        "label": "molandakJumpCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}